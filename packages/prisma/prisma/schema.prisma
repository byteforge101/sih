generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum Role {
  STUDENT
  MENTOR
  GUARDIAN
  ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeStatus {
  PAID
  DUE
  OVERDUE
}

enum NotificationType {
  ACADEMIC_ALERT
  FEE_REMINDER
  COUNSELING_SESSION
  COMMUNITY_UPDATE
}

enum SubmissionStatus {
  PENDING
  APPROVED
  DISAPPROVED
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String
  role          Role
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  student       Student?
  mentor        Mentor?
  guardian      Guardian?
  notifications Notification[]
}

model Student {
  id                             String                      @id @default(cuid())
  userId                         String                      @unique
  user                           User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  rollNumber                     String                      @unique
  enrollmentYear                 Int
  isAtRisk                       Boolean                     @default(false)
  rewardPoints                   Int                         @default(0)
  encoding                       Unsupported("vector(4096)")?
  mentorId                       String?
  mentor                         Mentor?                     @relation(fields: [mentorId], references: [id])
  guardianId                     String?
  guardian                       Guardian?                   @relation(fields: [guardianId], references: [id])
  attendance                     AttendanceRecord[]
  meetingAttendance              MeetingAttendance[]
  scores                         ScoreRecord[]
  fees                           FeeRecord[]
  counselingSessions             CounselingSession[]
 
  communityQuestionSubmissions   CommunityQuestionSubmission[]
  communityProjectSubmissions   CommunityProjectSubmission[]
  age                            Int?
  predictedscore                 Float?
  gender                         String?
  study_hours_per_day            Int?
  social_media_hours             Int?
  part_time_job                  String?
  attendance_percentage          Int?
  sleep_hours                    Int?
  diet_quality                   String?
  exercise_hours                 Int?
  parental_education_level       String?
  mental_health                  Int?
  application_mode               String?
  profileCompleted               Boolean?
  course                         String?
  attendances                    String? // Renamed from attendance
  previous_qualification         String?
  mothers_qualification          String?
  fathers_qualification          String?
  mothers_occupation             String?
  fathers_occupation             String?
  displaced                      String?
  debtor                         String?
  tuition_fees_up_to_date        String?
  scholarship_holder             String?
  age_at_enrollment              Int?
  international                  String?
  curricular_units_1st_sem_credited    Int?
  curricular_units_1st_sem_enrolled    Int?
  curricular_units_1st_sem_evaluations Int?
  curricular_units_1st_sem_approved    Int?
  curricular_units_1st_sem_grade       Float?
  curricular_units_1st_sem_without_evaluations Int?
  curricular_units_2nd_sem_credited    Int?
  curricular_units_2nd_sem_enrolled    Int?
  curricular_units_2nd_sem_evaluations Int?
  curricular_units_2nd_sem_approved    Int?
  curricular_units_2nd_sem_grade       Float?
  curricular_units_2nd_sem_without_evaluations Int?
  cart                           Cart?
  orders                         Order[]
}

model Mentor {
  id                 String              @id @default(cuid())
  userId             String              @unique
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  department         String?
  mentees            Student[]
  counselingSessions CounselingSession[]
  meetings           Meeting[]
  communityQuestions CommunityQuestion[]
  communityProjects             CommunityProject[]
  products           Product[]
}

model Guardian {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber String?
  wards       Student[]
}

model Course {
  id          String          @id @default(cuid())
  name        String
  courseCode  String          @unique
  description String?
  sessions    CourseSession[]
  scores      ScoreRecord[]
}

model MeetingAttendance {
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  meetingId String
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())

  @@id([studentId, meetingId])
}

model AttendanceRecord {
  id              String           @id @default(cuid())
  date            DateTime
  status          AttendanceStatus
  studentId       String
  student         Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseSessionId String
  courseSession   CourseSession    @relation(fields: [courseSessionId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseSessionId])
}

model ScoreRecord {
  id             String   @id @default(cuid())
  assessmentType String
  score          Float
  maxScore       Float
  date           DateTime
  studentId      String
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model FeeRecord {
  id        String    @id @default(cuid())
  amount    Float
  dueDate   DateTime
  status    FeeStatus @default(DUE)
  paidDate  DateTime?
  studentId String
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isRead    Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())
}

model CounselingSession {
  id        String   @id @default(cuid())
  date      DateTime
  notes     String?  @db.Text
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mentorId  String
  mentor    Mentor   @relation(fields: [mentorId], references: [id], onDelete: Cascade)
}

model CourseSession {
  id                String             @id @default(cuid())
  topic             String
  startTime         DateTime
  endTime           DateTime
  courseId          String
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attendanceRecords AttendanceRecord[]
  sentimentHotspots SentimentHotspot[]
  threeDAssets      ThreeDAsset[]
}

model SentimentHotspot {
  id                 String        @id @default(cuid())
  timestampInSeconds Int
  confusionLevel     Float
  courseSessionId    String
  courseSession      CourseSession @relation(fields: [courseSessionId], references: [id], onDelete: Cascade)
}

model ThreeDAsset {
  id              String        @id @default(cuid())
  name            String
  assetUrl        String
  description     String?
  createdAt       DateTime      @default(now())
  courseSessionId String
  courseSession   CourseSession @relation(fields: [courseSessionId], references: [id], onDelete: Cascade)
}

model CommunityProject {
  id           String                         @id @default(cuid())
  projectId    String                         @unique  // Custom project ID
  title        String
  description  String                         @db.Text
  organization String
  domain       String
  details      String?                        @db.Text
  reward       Int?                           // Reward points for completion
  imageUrl     String?
  mentorId     String
  mentor       Mentor                         @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  createdAt    DateTime                       @default(now())
  submissions  CommunityProjectSubmission[]
}

model CommunityProjectSubmission {
  id                   String            @id @default(cuid())
  answerText           String?           @db.Text
  answerImageUrl       String?
  status               SubmissionStatus  @default(PENDING)
  studentId            String
  student              Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  communityProjectId   String
  communityProject     CommunityProject  @relation(fields: [communityProjectId], references: [id], onDelete: Cascade)
  createdAt            DateTime          @default(now())
}


model Meeting {
  id        String   @id @default(cuid())
  title     String
  startTime DateTime
  mentorId  String
  mentor    Mentor   @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  attendees MeetingAttendance[]
}

model CommunityQuestion {
  id            String                        @id @default(cuid())
  description   String                        @db.Text
  imageUrl      String?
  mentorId      String
  mentor        Mentor                        @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  createdAt     DateTime                      @default(now())
  submissions   CommunityQuestionSubmission[]
}

model CommunityQuestionSubmission {
  id                  String            @id @default(cuid())
  answerText          String?           @db.Text
  answerImageUrl      String?
  status              SubmissionStatus  @default(PENDING)
  studentId           String
  student             Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  communityQuestionId String
  communityQuestion   CommunityQuestion @relation(fields: [communityQuestionId], references: [id], onDelete: Cascade)
  createdAt           DateTime          @default(now())
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String         @db.Text
  price       Int
  images      ProductImage[]
  mentorId    String
  mentor      Mentor         @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(cuid())
  studentId String     @unique
  student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
}

model Order {
  id          String      @id @default(cuid())
  studentId   String
  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  totalPoints Int
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Int
}